name: Trigger Odigos Enterprise Workflow

on:
  push:
    branches:
      - '**'

jobs:
  trigger-odigos-enterprise:
    runs-on: ubuntu-latest
    steps:  
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch Associated PR
        id: fetch_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Define variables
          REPO="${{ github.repository }}"
          REPO_OWNER=$(echo $REPO | cut -d'/' -f1)
          REPO_NAME=$(echo $REPO | cut -d'/' -f2)
          COMMIT_SHA="${{ github.sha }}" # Commit SHA from the push event

          # Query GitHub API for PRs linked to the commit
          RESPONSE=$(curl -s \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.groot-preview+json" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/commits/$COMMIT_SHA/pulls")

          echo "API Response: $RESPONSE" # Debug response

          # Extract PR URL
          PR_URL=$(echo "$RESPONSE" | jq -r '.[0].html_url')

          if [ "$PR_URL" != "null" ]; then
            echo "PR_URL=$PR_URL" >> $GITHUB_ENV
            echo "Pull Request URL: $PR_URL"
          else
            echo "No PR found for commit: $COMMIT_SHA"
          fi
          
      - name: github event
        run: |
          echo "Full event context:"
          echo '${{ toJSON(github.event) }}'

      - name: Get PR from commit
        id: pr-info
        run: |
          echo "Checking commit: ${{ github.event.after }}"
          
          # Get PR number that contains this commit
          PR_DATA=$(gh api graphql -f query='
            query($owner:String!, $repo:String!, $sha:String!) {
              repository(owner:$owner, name:$repo) {
                pullRequests(first:1, states:OPEN) {
                  nodes {
                    number
                    author {
                      login
                    }
                    commits(last:1) {
                      nodes {
                        commit {
                          oid
                        }
                      }
                    }
                  }
                }
              }
            }' -f owner="${{ github.repository_owner }}" -f repo="${{ github.event.repository.name }}" -f sha="${{ github.event.after }}")
          
          echo "PR Data: $PR_DATA"
          
          # Extract author login using jq
          PR_OWNER=$(echo "$PR_DATA" | jq -r '.data.repository.pullRequests.nodes[0].author.login')
          echo "PR Owner: $PR_OWNER"
          echo "pr_owner=$PR_OWNER" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Use PR owner
        run: echo "PR was opened by ${{ steps.pr-info.outputs.pr_owner }}"

      - name: Trigger workflow in another repository
        run: |
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.REMOTE_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/AvihuHenya/remote-repo/dispatches \
          -d '{"event_type": "enterprise-dependencies-update", "client_payload": {"pr_creator": "${{ github.event.pusher.name }}", "source_pr_url": "${{ env.PR_URL }}" }}'
          