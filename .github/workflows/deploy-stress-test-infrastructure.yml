name: 'Deploy Stress Test Infrastructure'

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Odigos tag to deploy (e.g., v1.2.0, v1.2.0-rc1)'
        required: true
        type: string
      cluster_name:
        description: 'Custom cluster name (optional)'
        required: false
        type: string
      deploy_load_test_apps:
        description: 'Deploy load test applications'
        required: false
        default: true
        type: boolean

jobs:
  deploy-stress-test-infrastructure:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      cluster_name: ${{ steps.cluster_name.outputs.cluster_name }}
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Tag Value
        id: tag
        run: |
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          echo "Using Odigos tag: ${{ github.event.inputs.tag }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::061717858829:role/GitHubActions-AvihuHenya-github-workflow
          aws-region: us-east-1

      - name: Install Tofu (OpenTofu)
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_wrapper: false
          tofu_version: "1.10.5"

      - name: Set Cluster Name
        id: cluster_name
        run: |
          # Generate cluster name with tag and DDMMYYYY format
          TIMESTAMP=$(date +%d%m%Y)
          TAG="${{ github.event.inputs.tag }}"
          
          # Clean tag name for use in cluster name (remove special characters)
          CLEAN_TAG=$(echo "$TAG" | sed 's/[^a-zA-Z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          
          if [[ -n "${{ inputs.cluster_name }}" ]]; then
            echo "cluster_name=${{ inputs.cluster_name }}" >> $GITHUB_OUTPUT
          else
            echo "cluster_name=stress-test-${CLEAN_TAG}-${TIMESTAMP}" >> $GITHUB_OUTPUT
          fi
          echo "Using cluster name: ${{ steps.cluster_name.outputs.cluster_name }}"

      - name: Deploy Stress Test Infrastructure
        id: deploy
        working-directory: stress-test
        env:
          TF_VAR_cluster_name: ${{ steps.cluster_name.outputs.cluster_name }}
          TF_VAR_odigos_tag: ${{ steps.tag.outputs.tag }}
          TF_VAR_odigos_api_key: ${{ secrets.ODIGOS_API_KEY }}
          TF_VAR_cluster_admin_users: ${{ secrets.CLUSTER_ADMIN_USERS || '' }}
          TF_VAR_cluster_admin_roles: ${{ secrets.CLUSTER_ADMIN_ROLES || '' }}
        run: |
          chmod +x deploy.sh
          ./deploy.sh deploy

      - name: Get Infrastructure Status
        id: status
        if: steps.deploy.outcome == 'success'
        working-directory: stress-test
        run: |
          echo "status_output<<EOF" >> $GITHUB_OUTPUT
          ./deploy.sh status >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get Final Status
        id: final_status
        if: steps.deploy.outcome == 'success'
        working-directory: stress-test
        run: |
          echo "final_status_output<<EOF" >> $GITHUB_OUTPUT
          ./deploy.sh status >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Display Cluster Connection Commands
        if: steps.deploy.outcome == 'success'
        working-directory: stress-test
        run: |
          echo "Cluster deployed successfully!"
          echo ""
          echo "Connection Commands:"
          echo "======================"
          echo ""
          echo "Copy and paste these commands in your terminal:"
          echo ""
          echo "# 1. Configure kubectl to connect to your cluster"
          echo "aws eks update-kubeconfig --region us-east-1 --name ${{ steps.cluster_name.outputs.cluster_name }}"
          echo ""
          echo "# 2. Test the connection"
          echo "kubectl get nodes"
          echo ""
          echo "# 3. View all pods in the cluster"
          echo "kubectl get pods --all-namespaces"
          echo ""
          echo "# 4. Switch to cluster context (if you have kubectx installed)"
          echo "kubectx arn:aws:eks:us-east-1:$(aws sts get-caller-identity --query Account --output text):cluster/${{ steps.cluster_name.outputs.cluster_name }}"
          echo ""
          echo "# 5. View all contexts"
          echo "   kubectl config get-contexts"
          echo ""
          echo "üîê Cluster Access:"
          echo "================="
          echo "The following users/roles have been granted admin access to the cluster:"
          if [[ -n "${{ secrets.CLUSTER_ADMIN_USERS }}" ]]; then
            echo "Users: ${{ secrets.CLUSTER_ADMIN_USERS }}"
          fi
          if [[ -n "${{ secrets.CLUSTER_ADMIN_ROLES }}" ]]; then
            echo "Roles: ${{ secrets.CLUSTER_ADMIN_ROLES }}"
          fi
          echo ""
          echo "üí° Note: Make sure your AWS credentials are configured and you have the necessary permissions."

      # - name: Notify Slack - Deployment Complete
      #   if: always()
      #   uses: odigos-io/ci-core/.github/actions/slack-release-notification@main
      #   with: 
      #     webhook-url: ${{ secrets.ODIGOS_RELEASE_STATUS_WEBHOOK_URL }}
      #     success-description: |
      #       Stress test infrastructure deployed successfully!
            
      #       **Odigos Tag:** ${{ steps.tag.outputs.tag }}
      #       **Cluster:** ${{ steps.cluster_name.outputs.cluster_name }}
      #       **Region:** us-east-1
      #       **Load Test Apps:** ${{ inputs.deploy_load_test_apps }}
            
      #       **Infrastructure Status:**
      #       ```
      #       ${{ steps.final_status.outputs.final_status_output }}
      #       ```
      #     failure-description: |
      #       ERROR: Failed to deploy stress test infrastructure
            
      #       **Odigos Tag:** ${{ steps.tag.outputs.tag }}
      #       **Cluster:** ${{ steps.cluster_name.outputs.cluster_name }}
      #       **Region:** us-east-1
            
      #       **Last Status Check:**
      #       ```
      #       ${{ steps.status.outputs.status_output }}
      #       ```